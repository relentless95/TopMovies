import { faCoffee, faStar } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import axios from "axios";
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import SearchBar from "./SearchBar";
import Categories from "./Categories";
import genres from "../genres.json";
import { motion } from "framer-motion"
// console.log("the genres are ---->", typeof genres);

//
// console.log("the genres are ---->", genres.genres);

const allCategories = [
  "All",
  ...new Set(genres.genres.map((genre) => genre.name)),
];
// console.log("all Categories--->", allCategories);

const newAllCats = [{ id: 1, name: "All" }, ...genres.genres];
// console.log("newAllCats---->", newAllCats);
//

const API_KEY = import.meta.env.VITE_API_KEY;
const apiURL = `https://api.themoviedb.org/3/trending/movie/week?api_key=${API_KEY}`;
function MovieList() {
  const [fetching, setFetching] = useState(true);
  const [movies, setMovies] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  // const [categories, setCategories] = useState(allCategories);
  const [categories, setCategories] = useState(newAllCats);
  const [filtered, setFiltered] = useState([]);
  const [activeGenre, setActiveGenre] = useState(0);

  useEffect(() => {
    console.log("useEffect-initial render (Mounting!");
    axios
      .get(apiURL)
      .then((response) => {
        // console.log("the response is: " , response)
        // const response = response.data

        setMovies(response.data.results);
        setFiltered(response.data.results);
        setFetching(false);
        // console.log("the movies array is: " , response.data.results)
      })
      .catch((err) => {
        console.log(err);
      });
  }, []);
  // console.log(movies);

  // const movieFilter = (Id) => {
  //   console.log("clicked on movieFilter");
  //   if (Id === 1) {
  //     return setMovies(movies);
  //   }

  //   const result = movies.filter((movie) => {
  //     return movie.genre_ids[0] == Id;
  //   });
  //   console.log("result", result);
  //   console.log("yes definitely clicked");
  //   setMovies(result);
  // };

  return (
    <>
      <div>
        <section className="heading">
          <h1>Trending movies</h1>
          <SearchBar searchTerm={searchTerm} setSearchTerm={setSearchTerm} />

          {fetching && (
            <img
              src={"/images/spinner2.gif"}
              alt="spinner"
              className="spinner"
            />
          )}
        </section>
        <Categories
          categories={categories}
          movies={movies}
          setFiltered={setFiltered}
          activeGenre={activeGenre}
          setActiveGenre={setActiveGenre}
        />

        <div>
          {filtered.length !== 0 &&
          filtered.some((curr) =>
            curr.title.toLowerCase().includes(searchTerm.toLowerCase())
          ) ? (
            <div className="main-container">
              {filtered
                .filter((curr) => {
                  if (searchTerm == "") {
                    return curr;
                  }
                  if (
                    curr.title.toLowerCase().includes(searchTerm.toLowerCase())
                  ) {
                    return curr;
                  } else {
                    console.log("not found");
                  }
                })
                .map((movie) => {
                  return (
                    <div className="card" key={movie.id}>
                      <Link to={`/movie/${movie.id}`}>
                        <img
                          src={
                            "https://image.tmdb.org/t/p/original" +
                            `${movie.poster_path}`
                          }
                          alt="image"
                          className="card-image"
                        />
                      </Link>
                      <div className="card-content">
                        <Link to="/details" className="movie-title">
                          <p>{movie.title}</p>
                        </Link>
                        <p>language: {movie.original_language}</p>
                        <div className="card-info">
                          <div>
                            <FontAwesomeIcon icon={faStar} />
                            score: {Math.round(movie.vote_average * 10) / 10}
                          </div>
                          <div>release date: {movie.release_date}</div>
                        </div>
                      </div>
                      <div className="button-container">
                        {/* <button className="card-button">more info</button> */}
                      </div>
                    </div>
                  );
                })}
            </div>
          ) : (
            <h1 className="heading-container">Nothing found...</h1>
          )}
        </div>
      </div>
    </>
  );
}

export default MovieList;
